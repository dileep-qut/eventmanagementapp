{
	"info": {
		"_postman_id": "271a97eb-6930-4998-8da5-3e1464d499bb",
		"name": "Events Management API",
		"description": "The event API description",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24014850"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "register",
							"item": [
								{
									"name": "Auth Controller register",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist;",
													"    pm.expect(responseData.error).to.exist;",
													"    pm.expect(responseData.statusCode).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Error is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-zero integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.exist;",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.not.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"password\": \"password123\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										}
									},
									"response": [
										{
											"name": "Login successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"password\": \"password123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"MongoDB ObjectId\",\n  \"name\": \"dev\",\n  \"email\": \"dev@qut.edu.au\",\n  \"token\": \"This is a JWT token\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"password\": \"password123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"password\": \"password123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"password\": \"password123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "Auth Controller login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"bearerToken\", jsonData.token);",
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - id, name, email, and token\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('name');",
													"    pm.expect(responseData).to.have.property('email');",
													"    pm.expect(responseData).to.have.property('token');",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.email).to.be.a('string');",
													"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
													"});",
													"",
													"",
													"pm.test(\"Token should not be empty\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"dev@qut.edu.au\",\n  \"password\": \"123456\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "Login successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"dev@qut.edu.au\",\n  \"password\": \"123456\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"MongoDB ObjectId\",\n  \"name\": \"dev\",\n  \"email\": \"dev@qut.edu.au\",\n  \"token\": \"This is a JWT token\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"dev@qut.edu.au\",\n  \"password\": \"123456\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"dev@qut.edu.au\",\n  \"password\": \"123456\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"dev@qut.edu.au\",\n  \"password\": \"123456\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "profile",
							"item": [
								{
									"name": "Auth Controller get Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData).to.have.property('_id');",
													"  pm.expect(responseData).to.have.property('name');",
													"  pm.expect(responseData).to.have.property('email');",
													"  pm.expect(responseData).to.have.property('createdAt');",
													"  pm.expect(responseData).to.have.property('updatedAt');",
													"  pm.expect(responseData).to.have.property('__v');",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.email).to.match(/^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/);",
													"});",
													"",
													"",
													"pm.test(\"CreatedAt and UpdatedAt are in valid date format\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
													"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"profile"
											]
										}
									},
									"response": [
										{
											"name": "Get user profile",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"_id\": \"6811a67495c4b721f28e63ca\",\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"createdAt\": \"2025-04-30T04:26:28.408Z\",\n  \"updatedAt\": \"2025-04-30T04:26:28.408Z\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Auth Controller update Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.be.at.least(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"profile"
											]
										}
									},
									"response": [
										{
											"name": "Get user profile",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"_id\": \"6811a67495c4b721f28e63ca\",\n  \"name\": \"John Doe\",\n  \"email\": \"n123456789@qut.edu.au\",\n  \"createdAt\": \"2025-04-30T04:26:28.408Z\",\n  \"updatedAt\": \"2025-04-30T04:26:28.408Z\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"n123456789@qut.edu.au\",\n  \"name\": \"John Doe\",\n  \"university\": \"Queensland University of Technology\",\n  \"address\": \"123 Main St, Brisbane, QLD 4000\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/profile",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"profile"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "events",
					"item": [
						{
							"name": "my-events",
							"item": [
								{
									"name": "Event Controller find My Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Validate the structure of the event object\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"  responseData.forEach(function(event) {",
													"    pm.expect(event).to.be.an('object');",
													"    pm.expect(event).to.have.property('_id');",
													"    pm.expect(event).to.have.property('name');",
													"    pm.expect(event).to.have.property('description');",
													"    pm.expect(event).to.have.property('location');",
													"    pm.expect(event).to.have.property('start_time');",
													"    pm.expect(event).to.have.property('end_time');",
													"    pm.expect(event).to.have.property('creator').that.is.an('object').and.has.property('_id');",
													"    pm.expect(event.creator).to.have.property('name');",
													"    pm.expect(event.creator).to.have.property('email');",
													"    pm.expect(event).to.have.property('participants').that.is.an('array');",
													"    pm.expect(event).to.have.property('ticket_price');",
													"    pm.expect(event).to.have.property('ticket_available');",
													"    pm.expect(event).to.have.property('category');",
													"    pm.expect(event).to.have.property('image_url');",
													"    pm.expect(event).to.have.property('createdAt');",
													"    pm.expect(event).to.have.property('updatedAt');",
													"    pm.expect(event).to.have.property('__v');",
													"    pm.expect(event).to.have.property('ticket_left');",
													"  });",
													"});",
													"",
													"",
													"pm.test(\"Start time and end time are in valid date-time format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    ",
													"    responseData.forEach(function(event) {",
													"        pm.expect(event.start_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*/);",
													"        pm.expect(event.end_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*/);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Ticket properties are non-negative integers\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('array');",
													"  ",
													"  responseData.forEach(function(event) {",
													"    pm.expect(event.ticket_price).to.be.a('number').and.to.be.at.least(0);",
													"    pm.expect(event.ticket_available).to.be.a('number').and.to.be.at.least(0);",
													"    pm.expect(event.ticket_left).to.be.a('number').and.to.be.at.least(0);",
													"  });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/my-events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												"my-events"
											]
										}
									},
									"response": [
										{
											"name": "Get my events",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/my-events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														"my-events"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"_id\": \"68218e24f41de91e2e46ed0a\",\n    \"name\": \"Event 1\",\n    \"description\": \"Description 1\",\n    \"location\": \"Location 1\",\n    \"start_time\": \"2026-01-24T14:00:00.000Z\",\n    \"end_time\": \"2026-01-25T14:00:00.000Z\",\n    \"creator\": {\n      \"_id\": \"68210420f639de1251ae31a5\",\n      \"name\": \"dev\",\n      \"email\": \"dev@qut.edu.au\"\n    },\n    \"participants\": [\n      {\n        \"_id\": \"68218e24f41de91e2e46ecf6\",\n        \"name\": \"User 2\",\n        \"email\": \"user_2@qut.edu.au\"\n      },\n      {\n        \"_id\": \"68218e24f41de91e2e46ecf4\",\n        \"name\": \"User 1\",\n        \"email\": \"user_1@qut.edu.au\"\n      },\n      {\n        \"_id\": \"68210420f639de1251ae31a5\",\n        \"name\": \"dev\",\n        \"email\": \"dev@qut.edu.au\"\n      }\n    ],\n    \"ticket_price\": 15,\n    \"ticket_available\": 1000,\n    \"ticket_left\": 100,\n    \"category\": \"Hackathon\",\n    \"createdAt\": \"2025-05-12T05:59:00.722Z\",\n    \"updatedAt\": \"2025-05-12T05:59:00.722Z\",\n    \"__v\": 0\n  }\n]"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/my-events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														"my-events"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/my-events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														"my-events"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/my-events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														"my-events"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/my-events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														"my-events"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "attendees",
									"item": [
										{
											"name": "Event Controller get Attendees",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 500\", function () {",
															"    pm.expect(pm.response.code).to.equal(500);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - statusCode and message\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('statusCode');",
															"    pm.expect(responseData).to.have.property('message');",
															"});",
															"",
															"",
															"pm.test(\"Validate that statusCode is a non-zero integer\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
															"    pm.expect(responseData.statusCode).to.not.equal(0, \"statusCode should be a non-zero integer\");",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Content-Type header is application/json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id/attendees",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id",
														"attendees"
													],
													"variable": [
														{
															"key": "id",
															"value": "ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Get event attendees",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/events/:id/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"events",
																":id",
																"attendees"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"_id\": \"68218e24f41de91e2e46ecf6\",\n    \"name\": \"User 2\",\n    \"email\": \"user_2@qut.edu.au\"\n  },\n  {\n    \"_id\": \"68218e24f41de91e2e46ecf4\",\n    \"name\": \"User 1\",\n    \"email\": \"user_1@qut.edu.au\"\n  },\n  {\n    \"_id\": \"68210420f639de1251ae31a5\",\n    \"name\": \"dev\",\n    \"email\": \"dev@qut.edu.au\"\n  }\n]"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/events/:id/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"events",
																":id",
																"attendees"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/events/:id/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"events",
																":id",
																"attendees"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/events/:id/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"events",
																":id",
																"attendees"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/events/:id/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"events",
																":id",
																"attendees"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Event Controller find By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Get event by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"_id\": \"68218a44558c61c3d0e5c773\",\n  \"name\": \"Event 0\",\n  \"description\": \"Description 0\",\n  \"location\": \"Location 0\",\n  \"start_time\": \"2026-01-24T14:00:00.000Z\",\n  \"end_time\": \"2026-01-25T14:00:00.000Z\",\n  \"creator\": \"68210420f639de1251ae31a5\",\n  \"ticket_price\": 15,\n  \"ticket_available\": 1000,\n  \"ticket_left\": 100,\n  \"category\": \"Workshop\",\n  \"createdAt\": \"2025-05-12T05:42:28.577Z\",\n  \"updatedAt\": \"2025-05-12T05:42:28.577Z\",\n  \"__v\": 0\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Resource not found\",\n  \"error\": \"Not Found\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Event Controller update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.exist;",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Create event",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"Tech Conference 2023\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"location\": \"New York, NY\",\n  \"start_time\": \"2019-02-01T00:00:00.000Z\",\n  \"end_time\": \"2019-02-01T00:00:00.000Z\",\n  \"creator\": {\n    \"_id\": \"68210420f639de1251ae31a5\",\n    \"name\": \"dev\",\n    \"email\": \"dev@qut.edu.au\"\n  },\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url\",\n  \"_id\": \"6821886a312ff80975a1e661\",\n  \"createdAt\": \"2025-05-12T05:34:34.384Z\",\n  \"updatedAt\": \"2025-05-12T05:34:34.384Z\",\n  \"__v\": 0\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Resource not found\",\n  \"error\": \"Not Found\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Event Controller remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Validate that the statusCode is a non-zero integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.statusCode).to.be.a('number').and.to.not.equal(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Delete event",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Event deleted successfully\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Resource not found\",\n  \"error\": \"Not Found\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Event Controller find All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the event object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(event) {",
											"        pm.expect(event).to.be.an('object');",
											"        pm.expect(event._id).to.be.a('string');",
											"        pm.expect(event.name).to.be.a('string');",
											"        pm.expect(event.description).to.be.a('string');",
											"        pm.expect(event.location).to.be.a('string');",
											"        pm.expect(event.start_time).to.exist.and.to.be.a('string');",
											"        pm.expect(event.end_time).to.exist.and.to.be.a('string');",
											"        pm.expect(event.creator).to.be.an('object');",
											"        pm.expect(event.creator._id).to.be.a('string');",
											"        pm.expect(event.creator.name).to.be.a('string');",
											"        pm.expect(event.creator.email).to.be.a('string');",
											"        pm.expect(event.ticket_price).to.be.a('number');",
											"        pm.expect(event.ticket_available).to.be.a('number');",
											"        pm.expect(event.category).to.be.a('string');",
											"        pm.expect(event.image_url).to.be.a('string');",
											"        pm.expect(event.createdAt).to.be.a('string');",
											"        pm.expect(event.updatedAt).to.be.a('string');",
											"        pm.expect(event.__v).to.be.a('number');",
											"        pm.expect(event.ticket_left).to.be.a('number');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Start_time and end_time are in a valid date-time format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(event => {",
											"        pm.expect(event.start_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"        pm.expect(event.end_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Verify that the creator object is present and contains expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    responseData.forEach(event => {",
											"        pm.expect(event.creator).to.exist;",
											"        pm.expect(event.creator._id).to.exist;",
											"        pm.expect(event.creator.name).to.exist;",
											"        pm.expect(event.creator.email).to.exist;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"events"
									],
									"query": [
										{
											"key": "name",
											"value": "Tech",
											"description": "Event name"
										},
										{
											"key": "category",
											"value": "Networking",
											"description": "Event category"
										}
									]
								}
							},
							"response": [
								{
									"name": "Get all events",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "name",
													"value": "Tech",
													"description": "Event name"
												},
												{
													"key": "category",
													"value": "Networking",
													"description": "Event category"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"_id\": \"68210420f639de1251ae31c5\",\n    \"name\": \"Event 4\",\n    \"description\": \"Description 4\",\n    \"location\": \"Location 4\",\n    \"start_time\": \"2026-01-24T14:00:00.000Z\",\n    \"end_time\": \"2026-01-25T14:00:00.000Z\",\n    \"creator\": {\n      \"_id\": \"68210420f639de1251ae31a5\",\n      \"name\": \"dev\",\n      \"email\": \"dev@qut.edu.au\"\n    },\n    \"ticket_price\": 15,\n    \"ticket_left\": 100,\n    \"ticket_available\": 1000,\n    \"category\": \"Workshop\",\n    \"createdAt\": \"2025-05-11T20:10:08.537Z\",\n    \"updatedAt\": \"2025-05-11T20:10:08.537Z\",\n    \"__v\": 0\n  }\n]"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "name",
													"value": "Tech",
													"description": "Event name"
												},
												{
													"key": "category",
													"value": "Networking",
													"description": "Event category"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "name",
													"value": "Tech",
													"description": "Event name"
												},
												{
													"key": "category",
													"value": "Networking",
													"description": "Event category"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "name",
													"value": "Tech",
													"description": "Event name"
												},
												{
													"key": "category",
													"value": "Networking",
													"description": "Event category"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events?name=Tech&category=Networking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "name",
													"value": "Tech",
													"description": "Event name"
												},
												{
													"key": "category",
													"value": "Networking",
													"description": "Event category"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Event Controller create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.include.all.keys(",
											"        \"name\", \"description\", \"location\", \"start_time\", \"end_time\",",
											"        \"creator\", \"participants\", \"ticket_price\", \"ticket_available\",",
											"        \"category\", \"image_url\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"",
											"    );",
											"});",
											"",
											"",
											"pm.test(\"Start_time is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.start_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Start_time is not in a valid date format\");",
											"});",
											"",
											"",
											"pm.test(\"End_time is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.end_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"});",
											"",
											"",
											"pm.test(\"Creator email is in a valid email format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.creator.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)*(\\.[a-z]{2,})$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": [
								{
									"name": "Create event",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"Tech Conference 2023\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"location\": \"New York, NY\",\n  \"start_time\": \"2019-02-01T00:00:00.000Z\",\n  \"end_time\": \"2019-02-01T00:00:00.000Z\",\n  \"creator\": {\n    \"_id\": \"68210420f639de1251ae31a5\",\n    \"name\": \"dev\",\n    \"email\": \"dev@qut.edu.au\"\n  },\n  \"participants\": [],\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url\",\n  \"_id\": \"6821886a312ff80975a1e661\",\n  \"createdAt\": \"2025-05-12T05:34:34.384Z\",\n  \"updatedAt\": \"2025-05-12T05:34:34.384Z\",\n  \"__v\": 0\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Tech Conference 2023\",\n  \"date\": \"2023-10-01T10:00:00Z\",\n  \"location\": \"New York, NY\",\n  \"description\": \"Here is the description of the event which is a long string\",\n  \"start_time\": \"2019-02-01T00:00:00Z\",\n  \"end_time\": \"2019-02-01T00:00:00Z\",\n  \"ticket_price\": 10,\n  \"ticket_available\": 100,\n  \"category\": \"Networking\",\n  \"image_url\": \"This is optional field of image url and should be URL return when creating new image\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "ticket",
					"item": [
						{
							"name": "get-price",
							"item": [
								{
									"name": "Ticket Controller get Ticket Price",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Verify that the statusCode field is present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message field is present in the response\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-zero integer\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.statusCode).to.be.a('number');",
													"  pm.expect(responseData.statusCode).to.not.equal(0, \"StatusCode should be a non-zero integer\");",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ticket/get-price",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ticket",
												"get-price"
											]
										}
									},
									"response": [
										{
											"name": "Get ticket price",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/get-price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"get-price"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"price\": 15\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/get-price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"get-price"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/get-price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"get-price"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/get-price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"get-price"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/get-price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"get-price"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "purchase",
							"item": [
								{
									"name": "Ticket Controller purchase Ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the statusCode is a non-zero integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.be.above(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ticket/purchase",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ticket",
												"purchase"
											]
										}
									},
									"response": [
										{
											"name": "Purchase ticket",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/purchase",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"purchase"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"price\": 142,\n  \"ticket_id\": \"68219a6b5d758dfb1640733d\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/purchase",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"purchase"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/purchase",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"purchase"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/purchase",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"purchase"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event_id\": \"\",\n  \"add_on\": {\n    \"vip\": true,\n    \"parking\": false,\n    \"food\": true,\n    \"priority\": false\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ticket/purchase",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"purchase"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "find-my-tickets",
							"item": [
								{
									"name": "Ticket Controller find My Ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the expected Content-Type header\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response body is an array\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData).to.be.an('array');",
													"});",
													"",
													"",
													"pm.test(\"Response body array should be empty\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.empty;",
													"});",
													"",
													"",
													"pm.test(\"Verify the 'find-my-tickets' endpoint is being used\", function () {",
													"    pm.expect(pm.request.url).to.include('/find-my-tickets');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ticket",
												"find-my-tickets"
											]
										}
									},
									"response": [
										{
											"name": "Find my tickets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"find-my-tickets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"_id\": \"682345d4c36f1bd8acc37ac0\",\n    \"event_id\": {\n      \"_id\": \"68218e24f41de91e2e46ed0a\",\n      \"name\": \"Event 1\",\n      \"description\": \"Description 1\",\n      \"location\": \"Location 1\",\n      \"start_time\": \"2026-01-24T14:00:00.000Z\",\n      \"end_time\": \"2026-01-25T14:00:00.000Z\"\n    },\n    \"checked_in\": false,\n    \"transaction_id\": \"dummy_transaction_id\",\n    \"createdAt\": \"2025-05-13T13:15:00.193Z\",\n    \"updatedAt\": \"2025-05-13T13:15:00.193Z\",\n    \"__v\": 0\n  }\n]"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"find-my-tickets"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"find-my-tickets"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"find-my-tickets"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/ticket/find-my-tickets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ticket",
														"find-my-tickets"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "image",
					"item": [
						{
							"name": "upload",
							"item": [
								{
									"name": "Image Controller upload Image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.to.have.status(400));",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response includes a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Response includes an error field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('error');",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.statusCode).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/image/upload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"image",
												"upload"
											]
										}
									},
									"response": [
										{
											"name": "Image uploaded successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/image/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														"upload"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"image_name\": \"069b71fc-94a8-40a5-b963-035f6d53551f.jpeg\",\n  \"image_url\": \"/public/1747029635173-15727855-069b71fc-94a8-40a5-b963-035f6d53551f.jpeg\",\n  \"_id\": \"68218e83f41de91e2e46ed15\",\n  \"createdAt\": \"2025-05-12T06:00:35.180Z\",\n  \"updatedAt\": \"2025-05-12T06:00:35.180Z\",\n  \"__v\": 0\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/image/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														"upload"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/image/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														"upload"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/image/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														"upload"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/image/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														"upload"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Image Controller get Image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - statusCode and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('statusCode');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"StatusCode is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.statusCode).to.exist;",
													"    pm.expect(responseData.statusCode).to.be.a('number');",
													"    pm.expect(responseData.statusCode).to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/image/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"image",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Get image by ID",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/image/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"image_name\": \"069b71fc-94a8-40a5-b963-035f6d53551f.jpeg\",\n  \"image_url\": \"/public/1747029635173-15727855-069b71fc-94a8-40a5-b963-035f6d53551f.jpeg\",\n  \"_id\": \"68218e83f41de91e2e46ed15\",\n  \"createdAt\": \"2025-05-12T06:00:35.180Z\",\n  \"updatedAt\": \"2025-05-12T06:00:35.180Z\",\n  \"__v\": 0\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/image/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/image/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/image/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/image/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"image",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "report",
					"item": [
						{
							"name": "{eventId}",
							"item": [
								{
									"name": "attendees",
									"item": [
										{
											"name": "Report Controller get Attendees",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 404\", function () {",
															"  pm.expect(pm.response.code).to.equal(404);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.message).to.exist;",
															"  pm.expect(responseData.error).to.exist;",
															"  pm.expect(responseData.statusCode).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Error is a non-empty string\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");",
															"});",
															"",
															"",
															"pm.test(\"Status code is a non-zero integer\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').that.is.not.equal(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/csv"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/report/:eventId/attendees",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"report",
														":eventId",
														"attendees"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "60d0fe4f5311236168a109ca",
															"description": "(Required) The ID of the event"
														}
													]
												}
											},
											"response": [
												{
													"name": "CSV file containing the list of attendees",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/csv"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"attendees"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/csv"
														}
													],
													"cookie": [],
													"body": "eu eiusmod"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/csv"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"attendees"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/csv"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/csv"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"attendees"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/csv"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/csv"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"attendees"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/csv"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/csv"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/attendees",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"attendees"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/csv"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "revenue",
									"item": [
										{
											"name": "Report Controller export Revenue",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/pdf"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/report/:eventId/revenue",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"report",
														":eventId",
														"revenue"
													],
													"variable": [
														{
															"key": "eventId",
															"value": "60d0fe4f5311236168a109ca",
															"description": "(Required) The ID of the event"
														}
													]
												}
											},
											"response": [
												{
													"name": "PDF report of ticket sales",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/pdf"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/revenue",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"revenue"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/pdf"
														}
													],
													"cookie": [],
													"body": "eu eiusmod"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/pdf"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/revenue",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"revenue"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/pdf"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Error\",\n  \"error\": \"Bad Request\"\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/pdf"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/revenue",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"revenue"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/pdf"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 401,\n  \"message\": \"Invalid, malformed, or expired token\",\n  \"error\": \"Unauthorized\"\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/pdf"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/revenue",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"revenue"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/pdf"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 403,\n  \"message\": \"The action you are trying to perform is not allowed or just cannot be done\",\n  \"error\": \"Forbidden\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/pdf"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/report/:eventId/revenue",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"report",
																":eventId",
																"revenue"
															],
															"variable": [
																{
																	"key": "eventId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/pdf"
														}
													],
													"cookie": [],
													"body": "{\n  \"statusCode\": 500,\n  \"message\": \"Something went wrong\",\n  \"error\": \"Internal Server Error\"\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://ifn636.marcusnguyen.dev"
		},
		{
			"key": "bearerToken",
			"value": ""
		}
	]
}